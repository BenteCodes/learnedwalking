import csv
from pathlib import Path


class SimplePatternGenerator:

    '''
    base_path = Path(__file__).parent
    base_path = (base_path / 'csv/').resolve()
    path1 = (base_path / 'sinepattern.csv').resolve()
    path2 = (base_path / 'plussinepattern.csv').resolve()
    path3 = (base_path / 'blopppattern.csv').resolve()
    path4 = (base_path / 'broadsinepattern.csv').resolve()
    '''
    number_of_patterns = 4
    step_length = 1
    phase = 100
    half_phase = 50
    
    pattern1 = [0.0, 0.06279051952931337, 0.12533323356430426, 0.18738131458572463, 0.2486898871648548, 0.3090169943749474, 0.368124552684678, 0.4257792915650727, 0.4817536741017153, 0.5358267949789967, 0.5877852522924731, 0.6374239897486897, 0.6845471059286887, 0.7289686274214116, 0.7705132427757893, 0.8090169943749475, 0.8443279255020151, 0.8763066800438637, 0.9048270524660196, 0.9297764858882515, 0.9510565162951535, 0.9685831611286311, 0.9822872507286887, 0.9921147013144779, 0.9980267284282716, 1.0, 0.9980267284282716, 0.9921147013144778, 0.9822872507286886, 0.9685831611286311, 0.9510565162951535, 0.9297764858882513, 0.9048270524660195, 0.8763066800438635, 0.844327925502015, 0.8090169943749475, 0.7705132427757893, 0.7289686274214114, 0.6845471059286885, 0.6374239897486895, 0.5877852522924732, 0.5358267949789967, 0.4817536741017152, 0.4257792915650725, 0.36812455268467775, 0.3090169943749471, 0.24868988716485482, 0.18738131458572457, 0.1253332335643041, 0.06279051952931314, -3.216245299353273e-16, -0.06279051952931335, -0.12533323356430429, -0.18738131458572477, -0.24868988716485502, -0.30901699437494773, -0.3681245526846783, -0.42577929156507266, -0.4817536741017154, -0.5358267949789968, -0.5877852522924734, -0.63742398974869, -0.6845471059286887, -0.7289686274214116, -0.7705132427757894, -0.8090169943749473, -0.8443279255020153, -0.8763066800438636, -0.9048270524660198, -0.9297764858882515, -0.9510565162951535, -0.9685831611286312, -0.9822872507286887, -0.9921147013144779, -0.9980267284282716, -1.0, -0.9980267284282716, -0.9921147013144779, -0.9822872507286886, -0.9685831611286311, -0.9510565162951536, -0.9297764858882512, -0.9048270524660196, -0.8763066800438634, -0.844327925502015, -0.809016994374947, -0.770513242775789, -0.7289686274214116, -0.6845471059286883, -0.6374239897486896, -0.5877852522924726, -0.5358267949789963, -0.4817536741017153, -0.4257792915650722, -0.36812455268467786, -0.3090169943749468, -0.2486898871648545, -0.18738131458572468, -0.1253332335643038, -0.06279051952931326]
    pattern2 = [0.0, 0.06279051952931337, 0.12533323356430426, 0.18738131458572463, 0.2486898871648548, 0.3090169943749474, 0.368124552684678, 0.4257792915650727, 0.4817536741017153, 0.5358267949789967, 0.5877852522924731, 0.6374239897486897, 0.6845471059286887, 0.7289686274214116, 0.7705132427757893, 0.8090169943749475, 0.8443279255020151, 0.8763066800438637, 0.9048270524660196, 0.9297764858882515, 0.9510565162951535, 0.9685831611286311, 0.9822872507286887, 0.9921147013144779, 0.9980267284282716, 1.0, 0.9980267284282716, 0.9921147013144778, 0.9822872507286886, 0.9685831611286311, 0.9510565162951535, 0.9297764858882513, 0.9048270524660195, 0.8763066800438635, 0.844327925502015, 0.8090169943749475, 0.7705132427757893, 0.7289686274214114, 0.6845471059286885, 0.6374239897486895, 0.5877852522924732, 0.5358267949789967, 0.4817536741017152, 0.4257792915650725, 0.36812455268467775, 0.3090169943749471, 0.24868988716485482, 0.18738131458572457, 0.1253332335643041, 0.06279051952931314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    pattern3 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.009016994374947407, 0.06812455268467799, 0.12577929156507273, 0.18175367410171533, 0.23582679497899667, 0.28778525229247315, 0.33742398974868976, 0.38454710592868874, 0.42896862742141156, 0.47051324277578926, 0.5090169943749474, 0.544327925502015, 0.5763066800438637, 0.6048270524660195, 0.6297764858882515, 0.6510565162951536, 0.668583161128631, 0.6822872507286888, 0.6921147013144779, 0.6980267284282715, 0.7, 0.6980267284282715, 0.6921147013144777, 0.6822872507286886, 0.668583161128631, 0.6510565162951536, 0.6297764858882513, 0.6048270524660195, 0.5763066800438634, 0.544327925502015, 0.5090169943749474, 0.47051324277578926, 0.42896862742141145, 0.3845471059286885, 0.33742398974868953, 0.28778525229247326, 0.23582679497899667, 0.18175367410171522, 0.1257792915650725, 0.06812455268467776, 0.00901699437494713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    pattern4 = [-0.4779937500000001, -0.5695327900000001, -0.6484695899999999, -0.7160175900000001, -0.7733287900000001, -0.8214937500000001, -0.8615415900000001, -0.8944399900000001, -0.92109519, -0.94235199, -0.95899375, -0.97174239, -0.98125839, -0.98814079, -0.99292719, -0.99609375, -0.99805519, -0.99916479, -0.99971439, -0.99993439, -0.99999375, -0.99999999, -0.99999919, -0.99997599, -0.99985359, -0.99949375, -0.99869679, -0.99720159, -0.99468559, -0.9907647900000001, -0.98499375, -0.97686559, -0.96581199, -0.95120319, -0.9323479899999999, -0.9084937500000001, -0.8788263900000001, -0.84247039, -0.79848879, -0.7458831899999999, -0.6835937499999998, -0.6104991900000001, -0.5254167900000001, -0.42710239000000005, -0.3142503899999999, -0.1854937499999998, 0.3142503900000002, 0.4271023899999997, 0.5254167899999999, 0.6104991899999999, 0.68359375, 0.74588319, 0.7984887900000001, 0.8424703900000001, 0.8788263900000001, 0.9084937500000001, 0.9323479900000001, 0.95120319, 0.96581199, 0.97686559, 0.98499375, 0.99076479, 0.99468559, 0.99720159, 0.99869679, 0.99949375, 0.99985359, 0.99997599, 0.99999919, 0.99999999, 0.99999375, 0.99993439, 0.99971439, 0.99916479, 0.99805519, 0.99609375, 0.99292719, 0.98814079, 0.9812583899999999, 0.97174239, 0.95899375, 0.9423519899999999, 0.9210951900000002, 0.8944399900000001, 0.8615415900000001, 0.8214937500000001, 0.7733287900000001, 0.7160175900000001, 0.6484695899999999, 0.5695327899999999, 0.4779937499999998, 0.3725775899999997, 0.25194798999999946, 0.11470718999999929, -0.040604009999999136, -0.25194799000000023, -0.37257759, -0.4779937500000001, -0.5695327900000001, -0.6484695899999999]
    
    def __init__(self):
        self.pattern = [self.getPatternFromPath(self.path1),
                        self.getPatternFromPath(self.path2),
                        self.getPatternFromPath(self.path3),
                        self.getPatternFromPath(self.path4)]

        self.values = [0, 0, 0, 0]
        self.currentstep = 0
        
    '''    
    def getPatternFromPath(self, path):
        tmparray = []
        with open(str(path), 'r') as csvfile:
            patternreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
            for row in patternreader:
                tmparray.append(float(row[1]))
        return tmparray
    '''

    def nextStep(self):
        self.currentstep += self.step_length
        self._handleOverflow()

        for index in range(0, self.number_of_patterns):
            self.values[index] = self.pattern[index][self.currentstep]
            
        return self.values

    def getNumberOfPatterns(self):
        return self.number_of_patterns
    
    def _handleOverflow(self):
        if self.currentstep >= self.phase:
            self.currentstep -= self.phase
            
    def increasePhaseByPI(self):
        self.currentstep += self.half_phase
        self._handleOverflow()
        
